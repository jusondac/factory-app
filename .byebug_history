c
prepare.checking!
c
prepare.checking!
prepare
c
result
c
prepare.all_ingredients_checked?
c
prepare.checking?
c
result
c
prepare
c
prepare.checking!
prepare.checking?
prepare
ls
c
prepare.checked?
prepare.unit_batch.status
unit_batch
prepare.unit_batch.preparation?
prepare.unit_batch.preparation
prepare.unit_batch
prepare.prepare_ingredients.pluck(:checked)
prepare.prepare_ingredients
prepare_ingredient
prepare_ingredients
prepare
prepare.all_ingredients
prepare
prepare.all_ingredients_checked?
c
prepare.checking!
prepare.status
prepare
puts "false" unless prepare.checking?
puts "wkwk" unless prepare_ingredient_id.present?
puts " wkwk"
prepare_ingredient_id.present?
c
service
result
c
UnitBatch.all.count
UnitBatch.all
@unit_batch.save
c
@unit_batch.errors.messages
@unit_batch.errors
@unit_batch.error_messages
@unit_batch.save
 c
@unit_batch.save
@unit_batch
c
@prepare
@prepare.checking?
@prepare
service.toggle_ingredient_check
service
params
/oarans
service.toggle_ingredient_check
service
service = PrepareCheckingService.new(
      prepare: @prepare,
      user: Current.user,
      prepare_ingredient_id: params[:prepare_ingredient_id]
    )
@prepare = Prepare.includes(
      { unit_batch: :product },
      :created_by,
      :checked_by,
      :prepare_ingredients
    ).find(params[:id])
@prepare.prepare_ingredients
@prepare
@prepare = Prepare.includes(
      { unit_batch: :product },
      :created_by,
      :checked_by,
      :prepare_ingredients
    ).find(params[:id])
UNIT-20250830-1
c
@prepare.checked_by
@prepare
ap @presenter
@presenter = PreparePresenter.new(@prepare)
 @presenter
ap @prepare_ingredients
ap _
@prepare_ingredients
ap _
@ap _
@prepare_ingredients = @prepare.prepare_ingredients.order(:ingredient_name)
@prepare.checking? && Current.user&.can_check_prepares?
[200~@prepare.checking? && Current.user&.can_check_prepares?~
c
ap @prepare
ap _
ap -
@prepare
service.cancel_checking
service
ap @prepare
prepare
ap service
service
ap service
ap  service
service
service = PrepareCheckingService.new(prepare: @prepare, user: Current.user)
ap @prepare
ap _
@prepare
@prepare.checked_by
@prepare
Current.user.can_check_prepares?
Current.user
user
@prepare
params
c
PrepareCheckingService.new(prepare: @prepare, user: Current.user)
@prepare.notes
@prepare.status
@prepare
c
@produce.machine.inactive!
@produce.machine.inactive
@produce.machine
@produce
c
prepare.all_ingredients_checked?
prepare
c
prepare.all_ingredients_checked?
 c
c
checked_ingredients_count
c
checked_ingredients
c
prepare.all_ingredients_checked?
prepare.all_ingredients_checked
prepare.checked_ingredients_count
prepare.prepare_ingredients.count
prepare.all_ingredients_checked?
prepare.all_ingredient_checked?
prepare.all_ingredient_checked
prepare
ingredient
c
ingredient
c
prepare.all_ingredients_checked?
prepare
 c
c
@prepare.status
service.start_checking
@prepare.status
service = PrepareCheckingService.new(prepare: @prepare, user: Current.user)
c
 c
c
@prepare_ingredients.count
_.count
@prepare_ingredients
c
prepare_ingredients.count
prepare_ingredients.all.pluck(:checked).count
prepare_ingredients.all.pluck(:checked)
prepare_ingredients.all
prepare_ingredients.all?
prepare_ingredients.present? && prepare_ingredients.all?(&:checked)
c
prepare_ingredients.all?(&:checked)
prepare_ingredients.all>(&:checked)
prepare_ingredients.all
prepare_ingredients.present?
prepare_ingredients.present? && prepare_ingredients.all?(&:checked)
   75:     prepare_ingredients.present? && prepare_ingredients.all?(&:checked)
c
@prepare
c
@prepare.checking?
@prepare.status
@prepare
c
Current.user
Current
c
Current.user
c
Current.user
Current
